generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String             @id
  username                 String             @unique
  avatar                   String?
  cover                    String?
  name                     String?
  surname                  String?
  description              String?
  city                     String?
  school                   String?
  work                     String?
  website                  String?
  createdAt                DateTime           @default(now())
  likes                    Like[]
  posts                    Post[]
  followers                Follower[]         @relation("UserFollower")
  following                Follower[]         @relation("UserFollowing")
  followingRequestSent     FollowingRequest[] @relation("FollowingRequestSent")
  followingRequestReceived FollowingRequest[] @relation("FollowingRequestReceived")
  blocks                   Block[]            @relation("BlocksSent")
  blocksBy                 Block[]            @relation("BlocksReceived")
  Story                    Story[]
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id     Int    @id @default(autoincrement())
  desc   String
  post   Post?  @relation(fields: [postId], references: [id])
  postId Int?
  Like   Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
  createdAt DateTime @default(now())
}

model Follower {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("UserFollower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
}

model FollowingRequest {
  id         Int    @id @default(autoincrement())
  sender     User   @relation("FollowingRequestSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User   @relation("FollowingRequestReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        Int    @id @default(autoincrement())
  blocker   User   @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User   @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String
}
